package com.googlecode.kevinarpe.papaya.exceptions;

/*
 * #%L
 * This file is part of Papaya.
 * %%
 * Copyright (C) 2013 Kevin Connor ARPE (kevinarpe@gmail.com)
 * %%
 * Papaya is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GPL Classpath Exception:
 * This project is subject to the "Classpath" exception as provided in
 * the LICENSE file that accompanied this code.
 * 
 * Papaya is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Papaya.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.io.File;
import java.io.IOException;

import com.googlecode.kevinarpe.papaya.annotations.NotFullyTested;
import com.googlecode.kevinarpe.papaya.args.ObjectArgs;
import com.googlecode.kevinarpe.papaya.args.StringArgs;

/**
 * This is a more specific version of {@link IOException}.  This should be used as a base class
 * for exceptions related to file and directory paths.
 * 
 * @author Kevin Connor ARPE (kevinarpe@gmail.com)
 * @see RegularFileNotFoundException
 * @see DirectoryNotFoundException
 */
@NotFullyTested
public class PathException2
extends IOException {

    private static final long serialVersionUID = 8568621218644282955L;

    public enum PathExceptionReason {
        
        PATH_DOES_NOT_EXIST(false),
        PARENT_PATH_DOES_NOT_EXIST(true),
        PATH_IS_REGULAR_FILE(false),
        PARENT_PATH_IS_REGULAR_FILE(true),
        PATH_IS_DIRECTORY(false),
        PARENT_PATH_IS_NON_WRITABLE_DIRECTORY(true),
        PATH_IS_ROOT_DIRECTORY(false),
        UNKNOWN(false);
        
        public final boolean hasParentPath;
        
        private PathExceptionReason(boolean hasParentPath) {
            this.hasParentPath = hasParentPath;
        }
        
        @Override
        public String toString() {
            String x = String.format("%s [name()='%s', hasParentPath=%s]",
                getClass().getSimpleName(), name(), hasParentPath);
            return x;
        }
    }
    
    private final PathExceptionReason _reason;
    private final File _path;
    private final File _optParentPath;
    
    public PathException2(
            PathExceptionReason reason, File path, File optParentPath, String message) {
        super(StringArgs.checkNotEmptyOrWhitespace(message, "message"));
        _reason = ObjectArgs.checkNotNull(reason, "reason");
        _path = ObjectArgs.checkNotNull(path, "path");
        if (reason.hasParentPath) {
            ObjectArgs.checkNotNull(optParentPath, "optParentPath");
        }
        _optParentPath = optParentPath;
    }
    
    public PathExceptionReason getReason() {
        return _reason;
    }

    public File getPath() {
        return _path;
    }
    
    public File getOptParentPath() {
        return _optParentPath;
    }

    /**
     * Generated by Eclipse.
     * <p>
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((_optParentPath == null) ? 0 : _optParentPath.hashCode());
        result = prime * result + ((_path == null) ? 0 : _path.hashCode());
        result = prime * result + ((_reason == null) ? 0 : _reason.hashCode());
        return result;
    }

    /**
     * Generated by Eclipse.
     * <p>
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PathException2 other = (PathException2) obj;
        if (_optParentPath == null) {
            if (other._optParentPath != null)
                return false;
        }
        else if (!_optParentPath.equals(other._optParentPath))
            return false;
        if (_path == null) {
            if (other._path != null)
                return false;
        }
        else if (!_path.equals(other._path))
            return false;
        if (_reason != other._reason)
            return false;
        return true;
    }

    @Override
    public String toString() {
        File path = getPath();
        path = path.getAbsoluteFile();
        File optParentPath = getOptParentPath();
        if (null != optParentPath) {
            optParentPath = optParentPath.getAbsoluteFile();
        }
        String x = String.format(
            "%s [%n\tgetReason()='%s',%n\tgetPath()='%s',%n\tgetOptParentPath()='%s',%n\tgetMessage()='%s'",
            getClass().getSimpleName(),
            getReason(),
            path,
            optParentPath,
            getMessage());
        String indent = "\t";
        for (Throwable cause = getCause()
                ; null != cause
                ; cause = cause.getCause(), indent = indent.concat("\t")) {
            x = x.concat(String.format(",%n%sgetCause()='%s'", indent, cause));
        }
        x = x.concat(String.format("%n\t]"));
        return x;
    }
}
